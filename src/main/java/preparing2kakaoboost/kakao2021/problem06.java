package preparing2kakaoboost.kakao2021;

//문제 6 – 카드 짝 맞추기
//정답률 : 0.95%
//문제 6 풀러 가기
//
//
//게임 개발자인 베로니는 개발 연습을 위해 다음과 같은 간단한 카드 짝 맞추기 보드게임을 개발해 보려고 합니다.
//게임이 시작되면 화면에는 카드 16장이 뒷면을 위로하여 4 x 4 크기의 격자 형태로 표시되어 있습니다. 각 카드의 앞면에는 카카오 프렌즈 캐릭터 그림이 그려져 있으며, 8가지의 캐릭터 그림이 그려진 카드가 각기 2장씩 화면에 무작위로 배치되어 있습니다.
//유저가 카드를 2장 선택하여 앞면으로 뒤집었을 때 같은 그림이 그려진 카드면 해당 카드는 게임 화면에서 사라지며, 같은 그림이 아니라면 원래 상태로 뒷면이 보이도록 뒤집힙니다. 이와 같은 방법으로 모든 카드를 화면에서 사라지게 하면 게임이 종료됩니다.
//
//게임에서 카드를 선택하는 방법은 다음과 같습니다.
//
//카드는 커서를 이용해서 선택할 수 있습니다.
//커서는 4 x 4 화면에서 유저가 선택한 현재 위치를 표시하는 “굵고 빨간 테두리 상자”를 의미합니다.
//커서는 [Ctrl] 키와 방향 키에 의해 이동되며 키 조작법은 다음과 같습니다.
//방향키 ←, ↑, ↓, → 중 하나를 누르면, 커서가 누른 키 방향으로 1칸 이동합니다.
//[Ctrl] 키를 누른 상태에서 방향키 ←, ↑, ↓, → 중 하나를 누르면, 누른 키 방향에 있는 가장 가까운 카드로 한 번에 이동합니다.
//만약, 해당 방향에 카드가 하나도 없다면 그 방향의 가장 마지막 칸으로 이동합니다.
//만약, 누른 키 방향으로 이동 가능한 카드 또는 빈 공간이 없어 이동할 수 없다면 커서는 움직이지 않습니다.
//커서가 위치한 카드를 뒤집기 위해서는 [Enter] 키를 입력합니다.
//[Enter] 키를 입력해서 카드를 뒤집었을 때
//앞면이 보이는 카드가 1장뿐이라면 그림을 맞출 수 없으므로 두 번째 카드를 뒤집을 때까지 앞면을 유지합니다.
//앞면이 보이는 카드가 2장이 된 경우, 두 개의 카드에 그려진 그림이 같으면 해당 카드들이 화면에서 사라지며, 그림이 다르다면 두 카드 모두 뒷면이 보이도록 다시 뒤집힙니다.
//
//
//“베로니”는 게임 진행 중 카드의 짝을 맞춰 몇 장 제거된 상태에서 카드 앞면의 그림을 알고 있다면, 남은 카드를 모두 제거하는데 필요한 키 조작 횟수의 최솟값을 구해 보려고 합니다. 키 조작 횟수는 방향 키와 [Enter] 키를 누르는 동작을 각각 조작 횟수 1로 계산하며, [Ctrl] 키와 방향 키를 함께 누르는 동작 또한 조작 횟수 1로 계산합니다.
//
//다음은 카드가 몇 장 제거된 상태의 게임 화면에서 커서를 이동하는 예시입니다.
//아래 그림에서 빈칸은 이미 카드가 제거되어 없어진 칸을 의미하며, 그림이 그려진 칸은 카드 앞 면에 그려진 그림을 나타냅니다.
//
//
//예시에서 커서는 두 번째 행, 첫 번째 열 위치에서 시작하였습니다.
//
//
//[Enter] 입력, ↓ 이동, [Ctrl]+→ 이동, [Enter] 입력 = 키 조작 4회
//
//
//[Ctrl]+↑ 이동, [Enter] 입력, [Ctrl]+← 이동, [Ctrl]+↓ 이동, [Enter] 입력 = 키 조작 5회
//
//
//[Ctrl]+→ 이동, [Enter] 입력, [Ctrl]+↑ 이동, [Ctrl]+← 이동, [Enter] 입력 = 키 조작 5회
//
//위와 같은 방법으로 커서를 이동하여 카드를 선택하고 그림을 맞추어 카드를 모두 제거하기 위해서는 총 14번(방향 이동 8번, [Enter] 키 입력 6번)의 키 조작 횟수가 필요합니다.
//
//
//문제
//
//현재 카드가 놓인 상태를 나타내는 2차원 배열 board와 커서의 처음 위치 r, c가 매개변수로 주어질 때, 모든 카드를 제거하기 위한 키 조작 횟수의 최솟값을 return 하도록 solution 함수를 완성해 주세요.
//
//
//제한사항
//
//board는 4 x 4 크기의 2차원 배열입니다.
//board 배열의 각 원소는 0 이상 6 이하인 자연수입니다.
//0은 카드가 제거된 빈칸을 나타냅니다.
//1부터 6까지의 자연수는 2개씩 들어있으며 같은 숫자는 같은 그림의 카드를 의미합니다.
//뒤집을 카드가 없는 경우(board의 모든 원소가 0인 경우)는 입력으로 주어지지 않습니다.
//r은 커서의 최초 세로(행) 위치를 의미합니다.
//c는 커서의 최초 가로(열) 위치를 의미합니다.
//r과 c는 0 이상 3 이하인 정수입니다.
//게임 화면의 좌측 상단이 (0, 0), 우측 하단이 (3, 3)입니다.
//
//[입출력 예]
//
//board	r	c	result
//[[1,0,0,3],[2,0,0,0],[0,0,0,2],[3,0,1,0]]	1	0	14
//[[3,0,0,2],[0,0,1,0],[0,1,0,0],[2,0,0,3]]	0	1	16
//
//입출력 예에 대한 설명
//
//– 입출력 예 #1
//문제의 예시와 같습니다.
//
//– 입출력 예 #2
//입력으로 주어진 게임 화면은 아래 그림과 같습니다.
//
//
//위 게임 화면에서 모든 카드를 제거하기 위한 키 조작 횟수의 최솟값은 16번입니다.
//
//
//문제 풀이
//카드 종류가 최대 6개이므로, 어떤 카드부터 제거해 나갈지 정하는 방법은 6! 가지입니다. 예를 들어 카드가 3종류인 경우, 3종류 카드를 제거하는 순서는 다음과 같이 6가지입니다.
//
//1, 2, 3
//1, 3, 2
//2, 1, 3
//2, 3, 1
//3, 1, 2
//3, 2, 1
//
//
//위와 같이 카드를 제거하는 모든 순서에 대해서 각각 카드를 제거해 보고, 그중 키 조작 횟수가 가장 적은 방법을 찾으면 됩니다. 이때, 각 카드는 종류별로 2장씩이므로, 두 카드를 제거하는 순서에 따라 키 조작 횟수가 달라질 수 있음을 주의합니다. 즉, 현재 제거해야 되는 카드 번호 X에 대해서, 카드 하나를 XA, 다른 카드 하나를 XB라고 했을 때 다음 두 가지 경우에 대해 고려해 주면 됩니다.
//
//현재 커서 위치 → XA 카드를 제거 → XB 카드를 제거
//현재 커서 위치 → XB 카드를 제거 → XA 카드를 제거
//
//
//만약 XB 카드를 나중에 제거했고, X 카드 다음으로 Y 카드를 제거해야 한다면 이번에는 다음과 같이 두 가지 경우를 고려합니다.
//
//현재 커서 위치(XB 카드 위치) → YA 카드를 제거 → YB 카드를 제거
//현재 커서 위치(XB 카드 위치) → YB 카드를 제거 → YA 카드를 제거
//
//
//따라서 위와 같은 방법으로 카드를 제거하는 가능한 모든 방법을 고려해 주면 되며, “현재 커서 위치 → XA 카드를 제거”와 같이 커서를 이동시키는 최소 조작 횟수는 BFS 탐색을 이용하여 최단거리를 구하면 됩니다.

public class problem06 {
    public void exec() {
        solution();
    }

    private void solution() {
        System.out.println("hi");
    }
}

package programmers2.dfsbfs;
// [문제 설명]
// n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.
//
// -1+1+1+1+1 = 3
// +1-1+1+1+1 = 3
// +1+1-1+1+1 = 3
// +1+1+1-1+1 = 3
// +1+1+1+1-1 = 3
// 사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.
//
// 제한사항
// 주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
// 각 숫자는 1 이상 50 이하인 자연수입니다.
// 타겟 넘버는 1 이상 1000 이하인 자연수입니다.
// 입출력 예
// numbers	target	return
// [1, 1, 1, 1, 1]	3	5
// [4, 1, 2, 1]	4	2
// 입출력 예 설명
// 입출력 예 #1
//
// 문제 예시와 같습니다.
//
// 입출력 예 #2
//
// +4+1-2+1 = 4
// +4-1+2-1 = 4
// 총 2가지 방법이 있으므로, 2를 return 합니다.
public class TargetNumber {
    // 실행 메서드
    public static void exec(){
        int[] arr = {1, 1, 1, 1, 1};
        int target = 3;
        solution(arr, target);
    }

    private static int solution(int[] arr, int target){
        // 타겟 넘버로 조합 가능한 가지 수 리턴
        // 더하고 뺴기
        // 그럼 더하고 빼기로 나오는 모든 가정을 다 테스트 해봐야 하네?
        // 그리고 마지막에 도달했을때 가짓수를 리턴


        //


        System.out.println("hi");
        return 1;
    }
}
